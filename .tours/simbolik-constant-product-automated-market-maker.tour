{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Simbolik Tour",
  "steps": [
    {
      "file": "src/CPAMM.sol",
      "description": "# Welcome to the interactive Simbolik tour!\n\nThis guide walks you through the first steps with Simbolik in 5 minutes.\n\nSimbolik aims to make debugging as easy as possible. In this spirit, Simbolik automates most of the the tedious work, such as compiling your contracts, creating a local testnet, deploying your contracts to the local testnet, as well as signing and sending transactions to simulate user behaviors.\n\nOur goal is debugging the `CPAMM` contract. The contract implements of a constant-product automated maker. More specifically, we want to see what happens if a user, let's call her Alice, adds liquidity to the market, and what happens if another user, say Bob, trades tokens on the market.",
      "line": 6,
      "selection": {
        "start": {
          "line": 3,
          "character": 68
        },
        "end": {
          "line": 3,
          "character": 76
        }
      }
    },
    {
      "file": "src/CPAMM.sol",
      "description": "The contract is not self-contained. It depends on two ERC20 contracts representing the assets that can be traded on the marketplace.",
      "line": 16
    },
    {
      "file": "test/DebugCPAMM.sol",
      "description": "Instead of manually deploying the ERC20 tokens, and then the market maker, we simply write a deployment script in Solidity.\n\nSimbolik's deployment scripts are plain-old Solidity smart contracts. There is nothing special about them, except of being self-contained.",
      "line": 17,
      "selection": {
        "start": {
          "line": 15,
          "character": 9
        },
        "end": {
          "line": 17,
          "character": 61
        }
      }
    },
    {
      "file": "test/DebugCPAMM.sol",
      "description": "While we're at it, we also deploy two smart contracts mimicing the users of the market maker. \n\nHere Alice plays the role of a liquidity provider and Bob plays the role of a swapper.\nIn the real-world Alice and Bob would be human actors, but here they're digital actors.\n\nSimilar to a deployment script, a digital actor is a plain old-smart contract. There is nothing special about it. We call them actors to emphasize that they're simulating a human actors.",
      "line": 19,
      "selection": {
        "start": {
          "line": 18,
          "character": 9
        },
        "end": {
          "line": 19,
          "character": 34
        }
      }
    },
    {
      "file": "test/DebugCPAMM.sol",
      "description": "After deploying the market maker and its dependencies, we're ready to debug it!\n\nThe `debugSwap`-function is a debugging scenario in which Alice first adds some liquidity to the market, then Bob trades some tokens, and eventually Alice withdraws her tokens. We call the `debugSwap` function a \"debugging scenario\".\n\nDebugging scenarios using the actor model have many advantages over manually simulating user behaviors. For once, you your debugging sessions become easily reproducible. You can always replay a debugging session and share it with your team mates. It's good practice commiting your debugging scenarios to the code base. In this regard they're very similar to unit tests.\n\nBut see for yourself! Just click the `â–· Debug`-button above the `debugSwap()`-function. When Simbolik is installed in your VSCode, the button should look similar to this screenshot:\n\n![Debug Button](.tours/debug-button.png)\n\nThe tour ends here, it's time to play around with the debugger. If something is unclear you may want to checkout our [docs](https://docs.runtimeverification.com/simbolik) or talk to us on our [discord](https://discord.gg/HHSGXUHD) or [telegram group](https://t.me/rv_simbolik). We're alwways happy to see a new face or talk to old friends!\n",
      "line": 33
    }
  ],
  "ref": "master",
  "isPrimary": true
}